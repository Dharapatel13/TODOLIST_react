{"version":3,"sources":["logo.svg","servies/constants/constant.js","servies/actions/action.js","components/list.js","components/todo.js","servies/reducers/reducer.js","containers/todoContainer.js","App.js","reportWebVitals.js","servies/reducers/index.js","index.js"],"names":["ADD_TO_LIST","DELETE_TO_LIST","Reset_Todo","CHECK_TO_LIST","i","connect","state","todolist","todos","data","props","className","style","textDecoration","cmpt","backgroundColor","fontSize","boxShadow","text","Button","onClick","e","id","console","log","dispatch","type","swal","title","icon","buttons","dangerMode","then","willDelete","useState","todoValue","SetTodoValue","placeholder","onChange","target","value","name","onKeyPress","key","alert","AddToListHandler","variant","color","preventDefault","map","todo","index","completed","initialState","AddToList","TODO","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","combineReducers","action","filter","findIndex","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c8a142f7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const ADD_TO_LIST=\"ADD_TO_LIST\"\r\nexport const DELETE_TO_LIST=\"DELETE_TO_LIST\"\r\nexport const Reset_Todo=\"Reset_Todo\"\r\nexport const CHECK_TO_LIST=\"CHECK_TO_LIST\"","\r\nimport {ADD_TO_LIST} from \"../constants/constant\"\r\nimport {DELETE_TO_LIST,Reset_Todo,CHECK_TO_LIST} from '../constants/constant'\r\nlet i=0;\r\nexport const AddToList=(data)=>{\r\n    console.log(data);\r\nreturn{\r\n    \r\n    type:ADD_TO_LIST,\r\n    data:data,\r\n    id:i++,\r\n    completed: false\r\n}\r\n}\r\nexport const DeleteToList=(id)=>{\r\n    console.log(id)\r\nreturn{\r\n    \r\n    type:DELETE_TO_LIST,\r\n    id:id,\r\n}\r\n}\r\nexport const ResetTOList=()=>{\r\n\r\nreturn{\r\n    \r\n    type:Reset_Todo,\r\n    \r\n   \r\n}\r\n}\r\nexport const checkTOList=(id)=>{\r\n\r\n    return{\r\n        \r\n        type:CHECK_TO_LIST,\r\n        \r\n        id\r\n      \r\n        \r\n       \r\n    }\r\n    }","import '../App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport Button from '@material-ui/core/Button';\r\nimport swal from \"sweetalert\";  \r\nimport {checkTOList, DeleteToList} from '../servies/actions/action'\r\n import { connect } from 'react-redux';\r\n\r\n\r\nfunction List(props) {\r\n    const DtlClcik=()=>{\r\n      swal({\r\n        title: \"Are you sure?\",\r\n        text: \"Once deleted, you will not be able to recover this item!\",\r\n        icon: \"warning\",\r\n        buttons: true,\r\n        dangerMode: true,\r\n      })\r\n      .then((willDelete) => {\r\n        if (willDelete) {\r\n          props.dispatch(DeleteToList(props.id))\r\n          swal(\"Deleted successfully!\", {\r\n            icon: \"success\",\r\n          });\r\n        }\r\n        //  else {\r\n        //   swal(\"Your \");\r\n        // }\r\n      });\r\n  \r\n     \r\n    }\r\n    \r\n  return (\r\n   <>\r\n\r\n   <li className=\" pl-3 p-2 m-3  item\" style={{ textDecoration: props.cmpt ? \"line-through\" : \"none\", backgroundColor:  '#00000013',\r\n fontSize: '1.5em',\r\n boxShadow: '10px 10px grey'}}>\r\n \r\n <div className=\"row justify-content-center p-0  \"> \r\n     <div className=\"col pl-xs-3 \">\r\n      \r\n       <span > {props.text} </span>\r\n    \r\n     </div>\r\n     <div className=\"col-auto p-0\">\r\n     <Button onClick={(e)=>{console.log(props.cmpt)\r\n       props.dispatch(checkTOList(props.id))} }  >\r\n        <CheckIcon className=\"text-success\"/>\r\n          </Button>\r\n     </div>\r\n     <div className=\"col-auto \">\r\n     <Button  onClick={DtlClcik}>\r\n        <DeleteIcon className=\"text-danger\"/>\r\n          </Button>\r\n     </div>\r\n     \r\n    \r\n</div>\r\n\r\n</li>\r\n  \r\n  \r\n   </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps=state=>({\r\n  todolist:state.todos.data\r\n})\r\n\r\n\r\n\r\nexport default connect(mapStateToProps) (List);","import { useState} from 'react';\r\nimport '../App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from '@material-ui/core/Button';\r\nimport {connect} from 'react-redux'\r\nimport ListItem from \"./list\";\r\nimport swal from \"sweetalert\";  \r\nimport {ResetTOList} from '../servies/actions/action'\r\n\r\nfunction TODO(props) {\r\n    const [todoValue,SetTodoValue]=useState('');\r\n    \r\nconsole.log(props.todos);\r\n    const TodoItem=(e)=>\r\n    {\r\n        SetTodoValue(e.target.value)\r\n    }\r\n    \r\n   \r\n\r\n  const keyPress=(e)=>{\r\n      if(e.key===\"Enter\")\r\n      {\r\n        if(todoValue === (\"\"))\r\n        {\r\n            alert(\"enter the value!!\");\r\n        }\r\n        else{\r\n           \r\n          \r\n            props.AddToListHandler(todoValue)\r\n            SetTodoValue(\"\");\r\n            \r\n        }\r\n       \r\n     \r\n      }\r\n  }\r\n  const allClrClcik=()=>{\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once Reset, you will not be able to recover this item!\",\r\n      icon: \"warning\",\r\n      buttons: true,\r\n      dangerMode: true,\r\n    })\r\n    .then((willDelete) => {\r\n      if (willDelete) {\r\n        props.dispatch(ResetTOList())\r\n        swal(\"Reset successfully!\", {\r\n          icon: \"success\",\r\n        });\r\n      }\r\n      //  else {\r\n      //   swal(\"Your \");\r\n      // }\r\n    });\r\n  }\r\n   \r\n  return (\r\n   <>\r\n<div className=\"m-md-5 m-1 todoItems\">\r\n   <div className=\"row justify-content-center\">\r\n        <div className=\"col-sm-8 pb-4\">\r\n        <input \r\n            type=\"text\" \r\n            placeholder=\"What you Want to Do....!\" \r\n            className=\"form-control \"\r\n            onChange={TodoItem} name='userInpt' \r\n            value={todoValue} \r\n            onKeyPress={keyPress}\r\n           \r\n            >\r\n        </input>\r\n       </div>\r\n\r\n       <div className=\"col-sm-auto\">\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-auto\">\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className=\"h-100\"\r\n                            onClick={(e)=>{ e.preventDefault();\r\n                                            props.AddToListHandler(todoValue);\r\n                                            SetTodoValue('');\r\n                                         }}  >\r\n                            ADD\r\n                        </Button>\r\n                    </div>\r\n                    <div className=\"col-auto\">\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className=\"h-100\"\r\n                            onClick={allClrClcik}\r\n                        >\r\n                            Reset\r\n                        </Button>\r\n                     </div>\r\n                </div>\r\n       </div>\r\n\r\n       \r\n   </div>\r\n   <div className=\"row  p-3\">\r\n            <div className=\"col p-0\">\r\n            <div className=\" \">\r\n            <ul className=\"list-inline  \">\r\n                  {props.todos.map((todo,index)=>(\r\n                  <ListItem \r\n                  text={todo.data}  \r\n                  key={index} \r\n                  id={todo.id} \r\n                  cmpt={todo.completed}\r\n                  />\r\n                  ))} \r\n            </ul>\r\n            </div>\r\n            </div>\r\n            \r\n    </div>\r\n</div>\r\n   \r\n   </>\r\n  );\r\n}\r\nconst mapStateToProps=state=>({\r\n    todos:state.todos.data\r\n})\r\n\r\nexport default connect(mapStateToProps)(TODO);","import { ADD_TO_LIST, Reset_Todo } from \"../constants/constant\";\r\nimport { DELETE_TO_LIST } from \"../constants/constant\";\r\nimport { CHECK_TO_LIST } from \"../constants/constant\";\r\n// import localForage from 'localforage';\r\n\r\n\r\nconst initialState={\r\n    data:[]\r\n}\r\nexport default function TodoItem(state=initialState,action){\r\n    switch (action.type) {\r\n        case ADD_TO_LIST:\r\n            console.log(state)\r\n            return{data:[...state.data,{\r\n                    data: action.data,\r\n                    id: action.id,\r\n                    completed:false\r\n                  }\r\n                ]\r\n              \r\n               \r\n            }\r\n    \r\n        case DELETE_TO_LIST:\r\n              const todos = state.data.filter((todo) => todo.id !== action.id)\r\n            return {\r\n              ...state,\r\n              data: todos,\r\n            }\r\n            case CHECK_TO_LIST:\r\n              let  index = state.data.findIndex((todo) => todo.id === action.id);\r\n              state.data[index].completed = !state.data[index].completed;\r\n              return {\r\n                data: [...state.data]\r\n              }\r\n\r\n            \r\n      case Reset_Todo:\r\n        \r\n            return initialState\r\n      \r\n              \r\n               \r\n    \r\n        default:\r\n            return state\r\n            break;\r\n    }\r\n}\r\n","import {connect} from 'react-redux'\r\nimport TODO from '../components/todo';\r\nimport {AddToList,DeleteToList} from '../servies/actions/action'\r\nimport TodoItem from '../servies/reducers/reducer';\r\n\r\n\r\nconst mapStateToProps=state=>({\r\n    todos:state.todos.data\r\n})\r\nconst mapDispatchToProps=dispatch=>({\r\n    AddToListHandler:data=> dispatch(AddToList(data)),\r\n    // deleteList: index =>dispatch(DeleteToList(index))\r\n\r\n})\r\n\r\n\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(TODO);","import logo from './logo.svg';\r\nimport './App.css';\r\nimport TODO from './containers/todoContainer'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n   <>\r\n   <div className=\"container-fluid \">\r\n<p className=\"h2 text-center p-3 mt-4 text-info\">TODO MANAGER</p>\r\n   <TODO/>\r\n\r\n   </div>\r\n   </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers } from 'redux'\r\nimport todos from \"./reducer\";\r\n\r\nexport default combineReducers ({todos}); \r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {createStore} from 'redux'\nimport {Provider} from 'react-redux'\nimport reportWebVitals from './reportWebVitals';\nimport rootReducer from './servies/reducers/index';\nconst store=createStore(rootReducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\nconsole.log(store)\nReactDOM.render(\n  <Provider store={store} >\n    <App />\n  </Provider >,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}